version: 2.1

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
            cd backend
            cat .env
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: frontend tests
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: backend tests
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm install 
            npm audit fix --force --audit-level=critical 
            npm audit fix --force --audit-level=critical 
            npm audit --audit-level=critical --force

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: backend scan
          command: |
            cd backend
            npm install 
            npm audit fix --force --audit-level=critical 
            npm audit fix --force --audit-level=critical 
            npm audit --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "	e9:55:aa:b4:5e:c0:07:6c:fb:e3:31:9f:c9:a3:c8:01"
      - attach_workspace:
          at: ~/
      - run:
          name: Configure Server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           sudo apt update
  #           sudo apt install -y awscli
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           cat .env
  #           npm i
  #           npm run build
  #           npm run migrations 2>&1 | tee migration-log.txt
  #           status_code="${PIPESTATUS[0]}"
  #           if [[ ! "${status_code}" == 0 ]]; then
  #             return 1
  #           fi
  #           if cat migration-log.txt | grep "has been executed successfully"; then
  #             curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
  #               --request PUT --data "1" \
  #               https://api.memstash.io/values/migration-"${CIRCLE_WORKFLOW_ID}"
  #           fi
  #     # - run:
  #     #     name: Send migration results to memstash
  #     #     command: |
  #     - destroy-environment:
  #        workflow_id: "${CIRCLE_WORKFLOW_ID}"
  #    # Here's where you will add some code to rollback on failure      

  # deploy-frontend:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y curl tar sudo
  #             curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash -
  #             yum install -y nodejs
  #             node --version
  #     - run:
  #         name: Get backend url
  #         command: |
  #           export API_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
  #               --request GET https://api.memstash.io/values/backendurl)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}" > .circleci/api_url.txt
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           export API_URL=$(cat .circleci/api_url.txt)
  #             echo "${API_URL}" > frontend/.env
  #             cd frontend
  #             npm i
  #             npm run build
  #             aws s3 cp dist s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID}
  #     # Here's where you will add some code to rollback on failure      
                    
  # deploy-backend:
  #   docker:
  #     - image: python:3.9.1-alpine3.12
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "e9:55:aa:b4:5e:c0:07:6c:fb:e3:31:9f:c9:a3:c8:01"
  #     - restore_cache:
  #        keys: [backend-build]
  #     - attach_workspace:
  #         at: /tmp/artifacts
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk update
  #           apk add --update ansible aws-cli openssh-client tar
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           tar -C /tmp/artifacts/backend -czvf artifact.tar.gz .
  #           cd .circleci/ansible
  #           export ANSIBLE_HOST_KEY_CHECKING=False
  #           ansible-playbook -i /tmp/artifacts/inventory.txt deploy-backend.yml
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID}"
  #     # Here's where you will add some code to rollback on failure  

  # smoke-test:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           sudo apt update
  #           sudo apt install -y awscli
  #           sudo apt install -y python3 ansible
  #     - run:
  #         name: Get backend url
  #         command: |
  #           curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
  #               --request GET https://api.memstash.io/values/backendurl \
  #               > backend-url.txt
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           url=$(cat backend-url.txt)
  #             url="http://${url}:3030/api/status"
  #             curl $url
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com"
  #             curl -s "${URL}"
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID}"
  #     # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y curl
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y curl
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           export OldWorkflowID=$(aws cloudformation \
  #               list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #               --no-paginate --output text)
  #           export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
  #             --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
  #           echo "${OldWorkflowID}"
  #           echo "${STACKS[@]}"
  #           # save oldworkflowid for the cleanup phase
  #           curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
  #             --request PUT --data "${OldWorkflowID}" \
  #               https://api.memstash.io/values/oldworkflowid
  #           # promote
  #           aws cloudformation update-stack \
  #             --use-previous-template \
  #             --stack-name cloudfront-${OldWorkflowID} \
  #             --parameters ParameterKey=WorkflowID,ParameterValue=$CIRCLE_WORKFLOW_ID,UsePreviousValue=false
  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID}"
  #     # Here's where you will add some code to rollback on failure  

  # cleanup:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           # your code here
  #           # export OldWorkflowID="the id here"
  #           # export STACKS=[] #put the list of stacks here
  #           export OldWorkflowID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
  #            --request GET https://api.memstash.io/values/oldworkflowid)
  #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #           then
  #             aws s3 rm s3://udapeople-"${OldWorkflowID}" --recursive
  #             aws cloudformation delete-stack --stack-name frontend-"${OldWorkflowID}"
  #             aws cloudformation delete-stack --stack-name backend-"${OldWorkflowID}"
  #             aws cloudformation delete-stack --stack-name cloudfront-"${OldWorkflowID}"
  #           fi
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           export OldWorkflowID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
  #             --request GET https://api.memstash.io/values/oldworkflowid)
  #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #           then
  #             aws s3 rm s3://udapeople-"${OldWorkflowID}" --recursive
  #             aws cloudformation delete-stack --stack-name frontend-"${OldWorkflowID}"
  #             aws cloudformation delete-stack --stack-name backend-"${OldWorkflowID}"
  #             aws cloudformation delete-stack --stack-name cloudfront-"${OldWorkflowID}"
  #           fi
  #           # if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #         # then
  #         #   # your code here
  #         # fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]